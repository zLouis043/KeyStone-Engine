# GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug_x64
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq ($(shell echo "test"), "test")
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

ifeq ($(origin CC), default)
  CC = gcc
endif
ifeq ($(origin CXX), default)
  CXX = g++
endif
ifeq ($(origin AR), default)
  AR = ar
endif
RESCOMP = windres
INCLUDES += -Isrc -Iinclude -I../../vendor/vcpkg/installed/x64-linux/include
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) -MD -MP $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS += -llua5.4 -lfmt -lspdlog
LDDEPS +=
LINKCMD = $(CXX) -o "$@" $(OBJECTS) $(RESOURCES) $(ALL_LDFLAGS) $(LIBS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef

ifeq ($(config),debug_x64)
TARGETDIR = ../build/bin/Debug
TARGET = $(TARGETDIR)/libKeyStoneCore.so
OBJDIR = ../build/obj/Debug/x64/Debug/KeyStoneCore
DEFINES += -DKS_EXPORT -DDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -fPIC -g
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -fPIC -g -std=c++20
ALL_LDFLAGS += $(LDFLAGS) -L../../vendor/vcpkg/installed/x64-linux/lib -L../../vendor/vcpkg/installed/x64-linux/bin -L/usr/lib64 -m64 -shared -Wl,-soname=libKeyStoneCore.so
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -f ../../vendor/vcpkg/installed/x64-linux/bin/spdlog.dll ../build/bin/Debug
	cp -f ../../vendor/vcpkg/installed/x64-linux/bin/fmt.dll ../build/bin/Debug
	cp -f ../../vendor/vcpkg/installed/x64-linux/bin/lua.dll ../build/bin/Debug
endef

else ifeq ($(config),release_x64)
TARGETDIR = ../build/bin/Release
TARGET = $(TARGETDIR)/libKeyStoneCore.so
OBJDIR = ../build/obj/Release/x64/Release/KeyStoneCore
DEFINES += -DKS_EXPORT -DNDEBUG
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -fPIC
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) -m64 -O2 -fPIC -std=c++20
ALL_LDFLAGS += $(LDFLAGS) -L../../vendor/vcpkg/installed/x64-linux/lib -L../../vendor/vcpkg/installed/x64-linux/bin -L/usr/lib64 -m64 -shared -Wl,-soname=libKeyStoneCore.so -s
define POSTBUILDCMDS
	@echo Running postbuild commands
	cp -f ../../vendor/vcpkg/installed/x64-linux/bin/spdlog.dll ../build/bin/Release
	cp -f ../../vendor/vcpkg/installed/x64-linux/bin/fmt.dll ../build/bin/Release
	cp -f ../../vendor/vcpkg/installed/x64-linux/bin/lua.dll ../build/bin/Release
endef

endif

# Per File Configurations
# #############################################


# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/arena_allocator.o
GENERATED += $(OBJDIR)/assets_manager.o
GENERATED += $(OBJDIR)/linear_allocator.o
GENERATED += $(OBJDIR)/log.o
GENERATED += $(OBJDIR)/memory.o
GENERATED += $(OBJDIR)/memory_api.o
GENERATED += $(OBJDIR)/pool_allocator.o
OBJECTS += $(OBJDIR)/arena_allocator.o
OBJECTS += $(OBJDIR)/assets_manager.o
OBJECTS += $(OBJDIR)/linear_allocator.o
OBJECTS += $(OBJDIR)/log.o
OBJECTS += $(OBJDIR)/memory.o
OBJECTS += $(OBJDIR)/memory_api.o
OBJECTS += $(OBJDIR)/pool_allocator.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking KeyStoneCore
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning KeyStoneCore
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) $(foreach f,$(subst /,\\,$(GENERATED)),if exist $(f) del /s /q $(f) >nul &)
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/assets_manager.o: src/asset/assets_manager.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/log.o: src/core/log.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/arena_allocator.o: src/memory/arena_allocator.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/linear_allocator.o: src/memory/linear_allocator.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/memory.o: src/memory/memory.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/memory_api.o: src/memory/memory_api.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/pool_allocator.o: src/memory/pool_allocator.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(ALL_CXXFLAGS) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif