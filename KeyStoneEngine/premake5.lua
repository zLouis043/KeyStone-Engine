local function setupVcpkg()
	local local_vcpkg = path.join(_MAIN_SCRIPT_DIR, "..", "vendor", "vcpkg")

	if os.isdir(local_vcpkg) then
		local triplet = os.target() == "windows" and "x64-windows"
			or os.target() == "linux" and "x64-linux"
			or "x64-osx"

		return {
			root = local_vcpkg,
			includedir = path.join(local_vcpkg, "installed", triplet, "include"),
			libdir = path.join(local_vcpkg, "installed", triplet, "lib"),
			bindir = path.join(local_vcpkg, "installed", triplet, "bin"),
		}
	end

	print("ERROR: vcpkg not found! Remember to run ./Scripts/setup.[bat - sh] before compiling everything.")
end

vcpkg = setupVcpkg()

print(vcpkg)

workspace("Keystone-Engine")
configurations({ "Debug", "Release" })
platforms({ "x64" })
startproject("KeyStone-CLI")

include("./KeyStoneCore/premake5.lua")
include("./KeyStoneCLI/premake5.lua")

newaction({
	trigger = "clean",
	description = "Remove all files generated by premake and build directories.",
	execute = function()
		print("Removing build dir...")
		os.rmdir("build")
		local make = "Makefile"
		local sln_ext = "*.sln"
		local vcxproj_ext = "*.vcxproj"
		local vcxproj_user = "*.vcxproj.user"
		local vcxproj_filters = "*.vcxproj.filters"

		if os.istarget("windows") then
			print("Removing build files...")
			os.execute("forfiles /S /M " .. sln_ext .. ' /C "cmd /c del @path"')
			os.execute("forfiles /S /M " .. vcxproj_ext .. ' /C "cmd /c del @path"')
			os.execute("forfiles /S /M " .. vcxproj_filters .. ' /C "cmd /c del @path"')
			os.execute("forfiles /S /M " .. vcxproj_user .. ' /C "cmd /c del @path"')
		else
			-- Per Linux/macOS, il comando "find" Ã¨ l'ideale.
			print("Removing build files...")
			os.execute("find . -name " .. make .. " -type f -delete")
		end
		print("Clean Completed!")
	end,
})
